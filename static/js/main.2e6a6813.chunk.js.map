{"version":3,"sources":["constants.js","store/actions/weatherActions.js","components/NavBar.jsx","services/weatherService.js","services/favoriteCitiesService.js","store/actions/favoritesActions.js","components/favorites/FavoritePreview.jsx","components/favorites/FavoriteList.jsx","pages/Favorites.jsx","components/SearchCityPreview.jsx","components/SearchCitiesList.jsx","components/dailyForecast/DailyForecastPreview.jsx","components/dailyForecast/DailyForecastList.jsx","components/CurrentWeather.jsx","components/ErrorMessageModal.jsx","pages/Home.jsx","App.jsx","reportWebVitals.js","store/store.js","store/reducers/weatherReducer.js","store/reducers/favoritesReducer.js","index.js"],"names":["constants","SET_SEARCH_CITIES_LIST","SET_SELECTED_CITY","SET_SELECTED_CITY_CONDITIONS","SET_FAVORITES_CITIES","TOGGLE_TEMPERATUREVALUE_VALUE","TOGGLE_DARK_MODE","setSearchCitiesList","cities","dispatch","a","type","setSelectedCity","city","selectedCity","setSelectedCityConditions","cityConditions","selectedCityConditions","NavBar","useDispatch","isDark","useSelector","state","weatherReducer","isDarkMode","onToggleDarkMode","className","exact","to","onClick","weatherService","getSearchCitiesList","getCurrentConditions","getDailyForecast","getCurrentLocationWeather","searchValue","url","axios","get","data","console","log","cityKey","currentConditions","Key","dailyForecast","location","lat","lng","currentLocation","favoriteCitiesService","saveFavoriteCityToStorage","key","loadFavoritesCititesList","localStorage","setItem","JSON","stringify","toggleFavoriteCity","index","findIndex","cityToFind","splice","isFavoriteCity","some","citiesList","getItem","parse","setFavoriteCity","favoriteCities","FavoritePreview","favoriteCity","useState","currentCityWeather","setCurrentWeather","history","useHistory","useEffect","currentWeather","push","LocalizedName","WeatherText","Temperature","Metric","Value","ev","stopPropagation","onRemoveFavoriteCity","FavoriteList","map","Favorites","favoritesReducer","getFavoriteCities","SearchCityPreview","onSelectSearchCity","SearchCitiesList","searchCities","length","DailyForecastPreview","forecast","farToCelsius","temperature","toFixed","date","Date","newDate","split","reverse","join","formatDate","src","iconNum","Day","Icon","getIconUrl","alt","IconPhrase","Minimum","Maximum","DailyForecastList","forecastList","EpochDate","CurrentWeather","setIsFavoriteCity","setForecastList","onGetDailyForecastList","dailyForecastList","DailyForecasts","onToggleFavoriteCity","ErrorMessageModal","message","show","Home","isMessageModalOpen","setIsMessageModalOpen","errorMessage","setErrorMessage","onHandleChange","test","target","value","setTimeout","placeholder","onChange","App","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","defaultCityConditions","error","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","temperatureValue","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e6a6813.chunk.js","sourcesContent":["export const constants = {\r\n    SET_SEARCH_CITIES_LIST: 'SET_SEARCH_CITIES_LIST',\r\n    SET_SELECTED_CITY: 'SET_SELECTED_CITY',\r\n    SET_SELECTED_CITY_CONDITIONS: 'SET_SELECTED_CITY_CONDITIONS',\r\n    SET_FAVORITES_CITIES: 'SET_FAVORITES_CITIES',\r\n    TOGGLE_TEMPERATUREVALUE_VALUE: 'TOGGLE_TEMPERATUREVALUE_VALUE',\r\n    TOGGLE_DARK_MODE: 'TOGGLE_DARK_MODE'\r\n}","import { constants } from \"../../constants\";\r\n\r\nexport function setSearchCitiesList(cities) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.SET_SEARCH_CITIES_LIST,\r\n            cities\r\n        })\r\n    }\r\n}\r\n\r\nexport function setSelectedCity(city) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.SET_SELECTED_CITY,\r\n            selectedCity: city\r\n        })\r\n    }\r\n}\r\n\r\nexport function setSelectedCityConditions(cityConditions) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.SET_SELECTED_CITY_CONDITIONS,\r\n            selectedCityConditions: cityConditions\r\n        })\r\n    }\r\n}\r\nexport function toggleTempatureValue(temperatureValue) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.TOGGLE_TEMPATUREVALUE_VALUE,\r\n            temperatureValue\r\n        })\r\n    }\r\n}\r\n\r\nexport function toggleDarkMode(isDarkMode) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.TOGGLE_DARK_MODE,\r\n            isDarkMode\r\n        })\r\n    }\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { toggleDarkMode } from \"../store/actions/weatherActions\";\r\n\r\nexport function NavBar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isDark = useSelector(state => state.weatherReducer.isDarkMode)\r\n\r\n    const onToggleDarkMode = () => {\r\n        dispatch(toggleDarkMode(!isDark))\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav-bar-box\">\r\n            <div className=\"logo-box\">\r\n                MyWeatherApp\r\n            </div>\r\n            <div className=\"nav-links-box\">\r\n                <NavLink exact to='/'>Home</NavLink>\r\n                <NavLink to='/favorites'>Favorites</NavLink>\r\n                <button onClick={() => onToggleDarkMode()}>{isDark ? 'Light' : 'Dark'}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nexport const weatherService = {\r\n    getSearchCitiesList,\r\n    getCurrentConditions,\r\n    getDailyForecast,\r\n    getCurrentLocationWeather\r\n}\r\n\r\nasync function getSearchCitiesList(searchValue) {\r\n    const url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf&q=${searchValue}&language=en-us`;\r\n    if (!searchValue) return;\r\n    try {\r\n        const cities = await axios.get(url);\r\n        return cities.data\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n}\r\n\r\nasync function getCurrentConditions(cityKey) {\r\n    const url = `http://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf`;\r\n    try {\r\n        const currentConditions = await axios.get(url)\r\n        return currentConditions.data[0]\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n}\r\n\r\nasync function getDailyForecast(city) {\r\n    const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${city?.Key}?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf`;\r\n    try {\r\n        const dailyForecast = await axios.get(url)\r\n        return dailyForecast.data\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n}\r\n\r\nasync function getCurrentLocationWeather(location) {\r\n    const url = `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf&q=${location.lat}%2C${location.lng}`;\r\n    try {\r\n        const currentLocation = await axios.get(url)\r\n        return currentLocation.data\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n}\r\n","export const favoriteCitiesService = {\r\n    saveFavoriteCityToStorage,\r\n    loadFavoritesCititesList,\r\n    toggleFavoriteCity,\r\n    isFavoriteCity\r\n}\r\n\r\nfunction isFavoriteCity(city) {\r\n    const cities = loadFavoritesCititesList('favoriteCities')\r\n    if (!cities) return;\r\n    return cities.some(cityToFind => cityToFind.Key === city?.Key)\r\n}\r\n\r\nfunction toggleFavoriteCity(city) {\r\n    let cities = loadFavoritesCititesList('favoriteCities')\r\n    if (!cities) {\r\n        cities = [city]\r\n        localStorage.setItem('favoriteCities', JSON.stringify(cities))\r\n        return cities\r\n    }\r\n    const index = cities.findIndex(cityToFind => cityToFind.Key === city.Key)\r\n    if (index > -1) {\r\n        cities.splice(index, 1)\r\n        localStorage.setItem('favoriteCities', JSON.stringify(cities))\r\n    } else {\r\n        cities = [...cities, city]\r\n        localStorage.setItem('favoriteCities', JSON.stringify(cities))\r\n    }\r\n    return [...cities]\r\n}\r\n\r\nfunction saveFavoriteCityToStorage(key, city) {\r\n    let cities = loadFavoritesCititesList('favoriteCities')\r\n    cities = [...cities, city]\r\n    localStorage.setItem(key, JSON.stringify(cities))\r\n}\r\n\r\nfunction loadFavoritesCititesList(key) {\r\n    const citiesList = localStorage.getItem(key)\r\n    return JSON.parse(citiesList)\r\n}","import { constants } from \"../../constants\"\r\n\r\nexport function setFavoriteCity(favoriteCities) {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: constants.SET_FAVORITES_CITIES,\r\n            favoriteCities\r\n        })\r\n    }\r\n}","import { useEffect, useState } from \"react\"\r\nimport { weatherService } from \"../../services/weatherService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setSelectedCity, setSelectedCityConditions } from \"../../store/actions/weatherActions\";\r\nimport { favoriteCitiesService } from \"../../services/favoriteCitiesService\";\r\nimport { setFavoriteCity } from \"../../store/actions/favoritesActions\";\r\n\r\nexport function FavoritePreview({ favoriteCity }) {\r\n\r\n    const [currentCityWeather, setCurrentWeather] = useState()\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        getCurrentConditions()\r\n    }, [])\r\n\r\n    const getCurrentConditions = async () => {\r\n        const currentWeather = await weatherService.getCurrentConditions(favoriteCity.Key)\r\n        setCurrentWeather(currentWeather)\r\n    }\r\n\r\n    const onRemoveFavoriteCity = (ev) => {\r\n        ev.stopPropagation()\r\n        const cities = favoriteCitiesService.toggleFavoriteCity(favoriteCity)\r\n        dispatch(setFavoriteCity(cities))\r\n    }\r\n\r\n    const moveToCityView = () => {\r\n        dispatch(setSelectedCity(favoriteCity))\r\n        dispatch(setSelectedCityConditions(currentCityWeather))\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites-preview-box\" onClick={() => moveToCityView()}>\r\n            <p>ID - {favoriteCity.Key}</p>\r\n            <h2>{favoriteCity?.LocalizedName}</h2>\r\n            <h3>{currentCityWeather?.WeatherText}</h3>\r\n            <p>{currentCityWeather?.Temperature?.Metric.Value}°c</p>\r\n            <button onClick={(ev) => onRemoveFavoriteCity(ev)}>Remove From Favorites</button>\r\n        </div>\r\n    )\r\n}\r\n","import { FavoritePreview } from \"./FavoritePreview\"\r\n\r\nexport function FavoriteList({ favoriteCities }) {\r\n\r\n    return (\r\n        <div className=\"favorites-list-box\">\r\n            {favoriteCities?.map(favoriteCity => <FavoritePreview key={favoriteCity.Key} favoriteCity={favoriteCity} />)}\r\n        </div>\r\n    )\r\n}","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FavoriteList } from \"../components/favorites/FavoriteList\";\r\nimport { favoriteCitiesService } from \"../services/favoriteCitiesService\";\r\nimport { setFavoriteCity } from \"../store/actions/favoritesActions\";\r\n\r\nexport function Favorites() {\r\n\r\n    const favoriteCities = useSelector(state => state.favoritesReducer.favoriteCities)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        getFavoriteCities()\r\n    }, [])\r\n\r\n    const getFavoriteCities = () => {\r\n        const cities = favoriteCitiesService.loadFavoritesCititesList('favoriteCities')\r\n        dispatch(setFavoriteCity(cities))\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites-box\">\r\n            <h1>My Cities</h1>\r\n            <FavoriteList favoriteCities={favoriteCities} />\r\n        </div>\r\n    )\r\n}","import { useDispatch } from \"react-redux\";\r\nimport { weatherService } from \"../services/weatherService\"\r\nimport { setSelectedCityConditions, setSelectedCity, setSearchCitiesList } from \"../store/actions/weatherActions\";\r\n\r\nexport function SearchCityPreview({ city }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSelectSearchCity = async () => {\r\n        dispatch(setSelectedCity(city))\r\n        const selectedCityConditions = await weatherService.getCurrentConditions(city.Key);\r\n        dispatch(setSelectedCityConditions(selectedCityConditions))\r\n        dispatch(setSearchCitiesList(''))\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => onSelectSearchCity()} className=\"search-city-preview-box\">\r\n            <p>{city.LocalizedName}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { SearchCityPreview } from \"./SearchCityPreview\";\r\nexport function SearchCitiesList() {\r\n\r\n    const searchCities = useSelector(state => state.weatherReducer.searchCities)\r\n\r\n    return (\r\n        <div className=\"search-cities-box\">\r\n            {searchCities?.length ? searchCities?.map(city => <SearchCityPreview key={city.Key} city={city} />) : ''}\r\n        </div>\r\n    )\r\n}","export function DailyForecastPreview({ forecast }) {\r\n\r\n    const formatDate = () => {\r\n        let date = forecast.Date\r\n        let newDate = date.split('T')\r\n        date = newDate[0]\r\n        newDate = date.split('-')\r\n        date = newDate.reverse().join('/')\r\n        return date\r\n    }\r\n\r\n    const farToCelsius = temperature => {\r\n        return temperature = ((temperature - 32) * 5 / 9).toFixed(0)\r\n    }\r\n\r\n    const getIconUrl = () => {\r\n        let iconNum = forecast.Day.Icon;\r\n        if (iconNum < 10) iconNum = '0' + iconNum;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconNum}-s.png`\r\n    }\r\n\r\n    return (\r\n        <div className=\"daily-forecast-preview-box\">\r\n            <h3>{formatDate()}</h3>\r\n            <img src={getIconUrl()} alt=\"\" />\r\n            <p>{forecast.Day.IconPhrase}</p>\r\n            <p>{farToCelsius(forecast?.Temperature.Minimum.Value)}°c - {farToCelsius(forecast.Temperature.Maximum.Value)}°c </p>\r\n        </div>\r\n    )\r\n}","import { DailyForecastPreview } from \"./DailyForecastPreview\";\r\n\r\nexport function DailyForecastList({ forecastList }) {\r\n\r\n    return (\r\n        <div className=\"daily-forecast-list-box\">\r\n            {forecastList?.map(forecast => <DailyForecastPreview key={forecast.EpochDate} forecast={forecast} />)}\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { favoriteCitiesService } from \"../services/favoriteCitiesService\";\r\nimport { weatherService } from \"../services/weatherService\";\r\nimport { setFavoriteCity } from \"../store/actions/favoritesActions\";\r\nimport { DailyForecastList } from \"./dailyForecast/DailyForecastList\";\r\n\r\nexport function CurrentWeather() {\r\n\r\n    const [isFavoriteCity, setIsFavoriteCity] = useState()\r\n    const [forecastList, setForecastList] = useState()\r\n    const currentWeather = useSelector(state => state.weatherReducer.selectedCityConditions)\r\n    const selectedCity = useSelector(state => state.weatherReducer.selectedCity)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setIsFavoriteCity(favoriteCitiesService.isFavoriteCity(selectedCity))\r\n        onGetDailyForecastList()\r\n    }, [selectedCity])\r\n\r\n    const onGetDailyForecastList = async () => {\r\n        const dailyForecastList = await weatherService.getDailyForecast(selectedCity)\r\n        setForecastList(dailyForecastList.DailyForecasts)\r\n    }\r\n\r\n    const onToggleFavoriteCity = () => {\r\n        const cities = favoriteCitiesService.toggleFavoriteCity(selectedCity)\r\n        dispatch(setFavoriteCity(cities))\r\n        setIsFavoriteCity(favoriteCitiesService.isFavoriteCity(selectedCity))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"current-weather-box\">\r\n                {isFavoriteCity && <i className=\"fas fa-star favorite-icon\"></i>}\r\n                <h1>{selectedCity ? selectedCity?.LocalizedName : 'Tel-Aviv'}</h1>\r\n                <p>{currentWeather?.WeatherText}</p>\r\n                <p>{currentWeather?.Temperature?.Metric.Value}°c</p>\r\n                {selectedCity && <button className={isFavoriteCity ? 'favorite-city-btn' : 'not-favorite-city-btn'} onClick={() => onToggleFavoriteCity()}>{isFavoriteCity ? 'Remove from Favorites' : 'Add to Favorites'}</button>}\r\n            </div>\r\n            <DailyForecastList forecastList={forecastList} />\r\n        </>\r\n    )\r\n}\r\n","export function ErrorMessageModal({ message, show }) {\r\n    return (\r\n        <div className={show ? \"error-message-modal-box open\" : \"error-message-modal-box\"}>\r\n            <p>{message}</p>\r\n        </div>\r\n    )\r\n}","import { weatherService } from \"../services/weatherService\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setSearchCitiesList } from \"../store/actions/weatherActions\";\r\nimport { SearchCitiesList } from \"../components/SearchCitiesList\";\r\nimport { CurrentWeather } from \"../components/CurrentWeather\";\r\nimport { useState } from \"react\";\r\nimport { ErrorMessageModal } from \"../components/ErrorMessageModal\";\r\n\r\nexport function Home() {\r\n\r\n    const dispatch = useDispatch()\r\n    const [isMessageModalOpen, setIsMessageModalOpen] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    const onHandleChange = async ev => {\r\n        if (/[^a-z]/i.test(ev.target.value)) {\r\n            setErrorMessage('You can only search with english letters.')\r\n            setIsMessageModalOpen(true)\r\n            setTimeout(() => {\r\n                setIsMessageModalOpen(false)\r\n            }, 3000)\r\n            return;\r\n        }\r\n        if (!ev.target.value) {\r\n            dispatch(setSearchCitiesList(''));\r\n            return;\r\n        }\r\n        const citiesList = await weatherService.getSearchCitiesList(ev.target.value)\r\n        if (!citiesList) {\r\n            setErrorMessage('There seems to be a problem loading the desired content.')\r\n            setIsMessageModalOpen(true)\r\n            setTimeout(() => {\r\n                setIsMessageModalOpen(false)\r\n            }, 3000)\r\n        }\r\n        dispatch(setSearchCitiesList(citiesList))\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-box\">\r\n            <ErrorMessageModal show={isMessageModalOpen} message={errorMessage} />\r\n            <input className=\"search-input\" type=\"text\" placeholder=\"Search a City\" onChange={(ev) => onHandleChange(ev)} />\r\n            <SearchCitiesList />\r\n            <CurrentWeather />\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch } from \"react-router\";\nimport { NavBar } from \"./components/NavBar\";\nimport { Favorites } from \"./pages/Favorites\";\nimport { Home } from \"./pages/Home\";\nimport { weatherService } from \"./services/weatherService\";\nimport { setSelectedCity, setSelectedCityConditions } from \"./store/actions/weatherActions\";\n\n\nfunction App() {\n  const isDark = useSelector(state => state.weatherReducer.isDarkMode)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    getLocation()\n  }, [])\n\n  const getLocation = async () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }\n      const currentLocation = await weatherService.getCurrentLocationWeather(location)\n      const defaultCityConditions = await weatherService.getCurrentConditions(currentLocation.Key)\n      dispatch(setSelectedCity(currentLocation))\n      dispatch(setSelectedCityConditions(defaultCityConditions))\n    }, async error => {\n      console.log(error)\n      const defaultCityConditions = await weatherService.getCurrentConditions('215854')\n      dispatch(setSelectedCityConditions(defaultCityConditions))\n    });\n  }\n\n  return (\n    <div className={isDark ? 'dark-app' : 'app'}>\n      <NavBar />\n      <Switch>\n        <Route path='/favorites' component={Favorites} />\n        <Route path='/' component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, compose, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport { weatherReducer } from './reducers/weatherReducer';\r\nimport { favoritesReducer } from './reducers/favoritesReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherReducer,\r\n    favoritesReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import { constants } from \"../../constants\"\r\n\r\nexport function weatherReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case constants.SET_SEARCH_CITIES_LIST:\r\n            return {\r\n                ...state,\r\n                searchCities: action.cities\r\n            }\r\n        case constants.SET_SELECTED_CITY:\r\n            return {\r\n                ...state,\r\n                selectedCity: action.selectedCity\r\n            }\r\n        case constants.SET_SELECTED_CITY_CONDITIONS:\r\n            return {\r\n                ...state,\r\n                selectedCityConditions: action.selectedCityConditions\r\n            }\r\n\r\n        case constants.TOGGLE_TEMPERATUREVALUE_VALUE:\r\n            return {\r\n                ...state,\r\n                temperatureValue: action.temperatureValue\r\n            }\r\n        case constants.TOGGLE_DARK_MODE:\r\n            return {\r\n                ...state,\r\n                isDarkMode: action.isDarkMode\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { constants } from \"../../constants\"\r\n\r\nexport function favoritesReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case constants.SET_FAVORITES_CITIES:\r\n            return {\r\n                ...state,\r\n                favoriteCities: action.favoriteCities\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}